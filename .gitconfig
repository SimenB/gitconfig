[core]
	ignorecase = false
	# Avoid some useless, OS-specific files
	excludesfile = ~/.config/git/ignore

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[credential]
	# Cache password when using https
	helper = cache --timeout=3600

[include]
	# Get environment-specific stuff, like email or github tokens
	path = ~/.gitconfig_local

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[http]
	# Screw security, amirite?
	sslVerify = false

[color]
	branch = auto
	diff = auto
	status = auto
	ui = auto

[push]
	default = upstream
	followTags = true

[pull]
	default = current

[branch]
	autosetuprebase = always

[diff]
	mnemonicprefix = true
	compactionHeuristic = true

[rerere]
	# A must when rebasing
	# Stands for "remember recorded resolution"
	enabled = true

[alias]
	nice			= !echo use glog
	panic			= !tar cvf ../git_panic.tar * --exclude='target/*' --exclude='*.class'

	la			= !grep '\t=' ~/.gitconfig
	#la			= "!grep '\t=' ~/.gitconfig | sed -e 's/=/^[[0;31m=^[[0m/g' | sed -e 's/#.*/^[[0;32m&^[[0m/g'"
	ignored			= ls-files --others -i --exclude-standard
	ready			= rebase -i @{u}
	logs			= !echo use glo
	s			= !echo use gsb
	rb			= "!f() { git rebase HEAD~$1 -i; }; f"
	rbs			= "!f() { git stash && git rb $1 && git stash pop; }; f"
	remas			= !gfa && git rebase origin/master
	redev			= !gfa && git rebase origin/develop
	amend			= !echo use gcn!
	amenda			= !echo use gcan!
	del-branch		= "!f() { git push origin :$1; }; f"
	standup			= !~/.scripts/gitstandup.sh
	week			= !git log --no-merges --since="\"1 week ago\"" --author "\"$(git config user.name)"\" --oneline --all
	this-week		= !git log --no-merges --since="\"last monday\"" --author "\"$(git config user.name)"\" --oneline --all
	move-to			= "!f() { git stash && git checkout $1 && git stash pop; }; f"
	merge-to		= "!f() { export tmp_branch=`git branch | grep '* ' | tr -d '* '` && git stash && git checkout $1 && git merge $tmp_branch && git checkout $tmp_branch && git stash pop; unset tmp_branch; }; f"
	merge-from		= "!f() { export tmp_branch=`git branch | grep '* ' | tr -d '* '` && git stash && git checkout $1 && git pull && git checkout $tmp_branch && git merge $1 && git stash pop; unset tmp_branch; }; f"
	commits-since		= shortlog -sn --no-merges --since
	commits-on-since	= "!f() { export tmp_branch=`git branch | grep '* ' | tr -d '* '` && git checkout $1 && git commits-since $2 && git checkout $tmp_branch;  unset tmp_branch; }; f"
	my-commits-since	= !git log --no-merges --author "\"$(git config user.name)"\" --oneline --all --since
	add-upstream		= remote add upstream
	force-pop		= !git stash show -p | git apply && git stash drop
	satsh			= stash
	githubprofile		= !git config user.name \"Simen Bekkhus\" && git config user.email \"sbekkhus91@gmail.com\" && git config commit.gpgsign true
	workprofile		= !git config user.name \"simbekkh\" && git config user.email \"simen.bekkhus@finn.no\" && git config commit.gpgsign false
	stash			= -c commit.gpgsign=false stash
	diff-copy		= !git --no-pager diff | pbcopy
	commit-copy		= !git --no-pager diff HEAD^ | pbcopy
	commits-copy		= "!f() { git --no-pager diff HEAD~$1 | pbcopy; }; f"
[git-up "fetch"]
	all = true
[rebase]
	autoStash = true
	autosquash = true
[pager]
	log =  diff-so-fancy | less
	show = diff-so-fancy | less
	diff = diff-so-fancy | less
[interactive]
	diffFilter = diff-so-fancy
[gpg]
	program = gpg1
